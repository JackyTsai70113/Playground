namespace playground.UnitTest.LeetCode._3000_3999;

public class _3108_MinimumCostTest
{
    [Theory]
    [InlineData(5, "[[0,1,7],[1,3,7],[1,2,1]]", "[[0,3],[3,4]]", "[1,-1]")]
    [InlineData(3, "[[0,2,7],[0,1,15],[1,2,6],[1,2,1]]", "[[1,2]]", "[0]")]
    [InlineData(9, "[[0,4,7],[3,5,1],[1,3,5],[1,5,1]]", "[[0,4],[1,5],[3,0],[3,2],[2,0],[7,0]]", "[7,1,-1,-1,-1,-1]")]
    [InlineData(4, "[[2,3,1],[1,3,5],[1,2,6],[3,0,7],[1,3,7],[0,2,5],[0,1,7]]", "[[2,1],[1,2],[0,1],[2,0],[0,2],[1,2],[3,2],[0,3],[2,1],[1,2]]", "[0,0,0,0,0,0,0,0,0,0]")]
    [InlineData(340, "[[90,290,89931],[146,77,98267],[328,205,90075],[196,62,98155],[314,125,98283],[332,150,98171],[328,55,98139],[306,35,98255],[182,216,98139],[293,100,98139],[335,66,90091],[295,10,98155],[132,111,90111],[172,63,90063],[129,9,98139],[264,100,90107],[303,260,92095],[135,169,97215],[224,339,92159],[280,88,97215],[183,135,96255],[18,97,97278],[44,105,94207],[135,114,98239],[65,303,96190],[163,301,95231],[26,65,96190],[26,222,95231],[250,333,94143],[228,65,91134],[279,148,96255],[53,148,98302],[208,105,97215],[88,190,91134],[280,114,92095],[333,302,95230],[260,183,98239],[208,228,97279],[88,60,92094],[279,60,97279],[42,144,97215],[135,333,93118],[135,339,96191],[303,93,96255],[301,148,94207],[210,26,97214],[299,183,94142],[187,280,91070],[136,184,95230],[26,339,96254],[279,49,93118],[279,136,98238],[60,49,91071],[339,208,91070],[208,60,92095],[163,299,91070],[207,88,97279],[208,222,95230],[53,49,98239],[26,163,96255],[187,292,93182],[53,136,97214],[105,207,94143],[260,187,98302],[279,49,95167],[49,93,94143],[169,136,92094],[303,301,98239],[292,148,97278],[183,136,91071],[18,42,96190],[190,18,93183],[144,253,95166],[60,302,93119],[280,208,96190],[169,108,92095],[60,105,93119],[260,184,94206],[292,53,98302],[228,190,92159],[292,208,97278],[18,333,93182],[292,207,96255],[65,299,96191],[299,279,91071],[224,210,94142],[208,190,96190],[26,301,91070],[222,88,94206],[18,93,92159],[93,105,97278],[144,260,91071],[88,97,98302],[144,280,95231],[303,280,92158],[210,97,95167],[187,280,97278],[280,207,97214],[302,97,93182],[184,105,97278],[339,26,92094],[163,49,91134],[187,280,92094],[44,60,95230],[184,136,93118],[301,169,93183],[279,114,91071],[279,208,98302],[18,187,95230],[44,169,91071],[136,93,94143],[88,135,91134],[292,163,96190],[60,97,93119],[222,93,94206],[187,148,96254],[93,148,93119],[280,184,96190],[303,302,92159],[267,296,65023],[223,34,60863],[67,248,64959],[261,25,60735],[28,285,61247],[189,201,60799],[248,99,61247],[57,124,65023],[203,96,65535],[201,13,61247],[261,209,60735],[8,189,60735],[103,296,64831],[246,51,65407],[8,189,61247],[214,212,61439],[246,170,61311],[214,170,61375],[213,337,65471],[268,103,65407],[30,51,65023],[265,30,60735],[33,41,60863],[25,248,61247],[165,30,61375],[170,265,61375],[99,124,61375],[234,73,64895],[204,213,64831],[261,51,64895],[259,201,64959],[291,185,60927],[99,215,65343],[267,246,65343],[139,297,60735],[124,242,65535],[78,198,61375],[300,110,64959],[85,287,64895],[242,204,61247],[85,78,61247],[212,149,61439],[259,248,61247],[259,291,60799],[19,248,65407],[57,268,60799],[246,234,61311],[213,234,61247],[283,318,64831],[33,138,65343],[13,33,61375],[8,234,61247],[173,291,60863],[173,255,65023],[285,64,65343],[261,236,60735],[337,165,61247],[173,78,64959],[78,239,64895],[103,188,61247],[212,165,64831],[36,128,32719],[15,128,22351],[288,11,25471],[36,162,21335],[36,15,21374],[11,128,27599],[36,11,19439],[15,128,27606],[36,15,29678],[162,128,29639],[36,128,19286],[162,36,18255],[162,128,25470],[15,11,18302],[162,288,20463],[36,288,21359],[288,36,31687],[11,36,18423],[162,36,29527],[36,288,23502],[162,128,18422],[128,162,26606],[11,162,24422],[11,15,19271],[11,128,29518],[288,15,18374],[288,128,31599],[128,288,24534],[245,164,40954],[47,219,53242],[54,336,55259],[0,164,65369],[336,0,38744],[7,98,65278],[7,206,60406],[56,29,61167],[4,75,59895],[94,75,60143],[166,56,60902],[95,56,59878],[220,338,65271],[113,226,65470],[140,159,62454],[70,226,62447],[133,160,65319],[133,70,63487],[37,109,31737],[37,270,6643],[37,270,31219],[270,109,8181],[270,109,5617],[37,109,21500],[37,270,12793],[326,282,55014],[244,142,65229],[244,282,57325],[282,244,63196],[31,72,55238],[326,244,65277],[221,72,65525],[326,282,57310],[106,273,99327],[127,202,27575],[127,202,15295],[96,234,23682],[72,166,20928],[224,152,37140],[306,302,54205],[300,254,22084]]", "[[202,127],[273,106],[221,31],[31,221],[111,132],[205,55],[66,335],[202,127],[270,37],[41,248],[205,328],[282,326],[106,273],[190,65],[283,318],[318,283],[37,270],[216,182],[129,9],[4,94],[164,336],[28,285],[244,282],[9,129],[224,187],[29,166],[300,110],[306,35],[219,47],[125,314],[142,244],[47,219],[62,196],[106,273],[37,270],[34,223],[219,47],[31,221],[280,279],[150,332],[221,72],[318,283],[206,7],[125,314],[109,37],[10,295],[297,139],[300,110],[63,172],[70,113],[125,314],[111,132],[220,338],[111,132],[94,4],[215,78],[100,293],[301,26],[98,206],[140,159],[335,66],[106,273],[9,129],[245,336],[295,10],[159,140],[109,270],[127,202],[150,332],[19,239],[10,295],[332,150],[293,264],[66,335],[142,282],[55,205],[90,290],[285,64],[62,196],[63,172],[139,297],[209,214],[34,223],[293,100],[125,314],[106,273],[31,72],[54,245],[94,4],[335,66],[10,295],[314,125],[9,129],[133,226],[150,332],[264,293],[15,36],[54,164],[136,190],[9,129],[297,139],[220,338],[223,34],[132,111],[129,9],[56,29],[164,336],[47,219],[133,226],[172,63],[140,159],[35,306],[110,300],[196,62],[146,77],[291,188],[300,110],[318,283],[236,246],[295,10],[326,282],[94,4]]", "[11191,99327,16576,16576,90111,89947,90091,11191,4592,19458,89947,54980,99327,260,64831,64831,4592,98139,98139,59623,38744,61247,54980,98139,260,16576,21508,260,53242,98283,54980,53242,98155,99327,4592,60863,53242,16576,260,98171,16576,64831,60150,98283,4592,98155,60735,21508,90063,62246,98283,90111,65271,90111,59623,19458,89947,260,60150,62454,90091,99327,98139,38744,98155,62454,4592,11191,98171,19458,98155,98171,89947,90091,54980,89947,89931,61247,98155,90063,60735,19458,60863,89947,98283,99327,16576,38744,59623,90091,98155,98283,98139,62246,98171,89947,17222,38744,260,98139,60735,65271,60863,90111,98139,16576,38744,53242,62246,90063,62454,260,21508,98155,98267,19458,21508,64831,19458,98155,54980,59623]")]
    public void MinimumCost(int n, string edges, string query, string expected)
    {
        var actual = _3108_MinimumCost.MinimumCost(n, edges.To2dArr(), query.To2dArr());
        Assert.Equal(expected.ToArr(), actual);
        var actual1 = _3108_MinimumCost.MinimumCost2(n, edges.To2dArr(), query.To2dArr());
        Assert.Equal(expected.ToArr(), actual1);
    }
}
